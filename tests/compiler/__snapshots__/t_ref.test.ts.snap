// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-ref can get a dynamic ref on a node 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { singleRefSetter } = helpers;
  
  let block1 = createBlock(\`<div><span block-ref=\\"0\\"/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = this.__owl__.refs;
    const v1 = ctx['id'];
    let ref1 = singleRefSetter(refs, \`myspan\${v1}\`);
    return block1([ref1]);
  }
}"
`;

exports[`t-ref can get a dynamic ref on a node, alternate syntax 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { singleRefSetter } = helpers;
  
  let block1 = createBlock(\`<div><span block-ref=\\"0\\"/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = this.__owl__.refs;
    const v1 = ctx['id'];
    let ref1 = singleRefSetter(refs, \`myspan\${v1}\`);
    return block1([ref1]);
  }
}"
`;

exports[`t-ref can get a ref on a node 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { singleRefSetter } = helpers;
  
  let block1 = createBlock(\`<div><span block-ref=\\"0\\"/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = this.__owl__.refs;
    const ref1 = singleRefSetter(refs, \`myspan\`);
    return block1([ref1]);
  }
}"
`;

exports[`t-ref ref in a t-call 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-ref ref in a t-call 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { singleRefSetter } = helpers;
  
  let block1 = createBlock(\`<div>1<span block-ref=\\"0\\"/>2</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = this.__owl__.refs;
    const ref1 = singleRefSetter(refs, \`name\`);
    return block1([ref1]);
  }
}"
`;

exports[`t-ref ref in a t-if 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { singleRefSetter } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  let block2 = createBlock(\`<span block-ref=\\"0\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = this.__owl__.refs;
    const ref1 = singleRefSetter(refs, \`name\`);
    let b2;
    if (ctx['condition']) {
      b2 = block2([ref1]);
    }
    return block1([], [b2]);
  }
}"
`;

exports[`t-ref refs in a loop 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { prepareList, singleRefSetter, withKey } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  let block3 = createBlock(\`<div block-ref=\\"0\\"><block-text-1/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = this.__owl__.refs;
    ctx = Object.create(ctx);
    const [k_block2, v_block2, l_block2, c_block2] = prepareList(ctx['items']);;
    for (let i1 = 0; i1 < l_block2; i1++) {
      ctx[\`item\`] = v_block2[i1];
      const key1 = ctx['item'];
      const tKey_1 = ctx['item'];
      const v1 = ctx['item'];
      let ref1 = singleRefSetter(refs, (v1));
      let txt1 = ctx['item'];
      c_block2[i1] = withKey(block3([ref1, txt1]), tKey_1 + key1);
    }
    const b2 = list(c_block2);
    return block1([], [b2]);
  }
}"
`;

exports[`t-ref two refs, one in a t-if 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { singleRefSetter } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/><p block-ref=\\"0\\"/></div>\`);
  let block2 = createBlock(\`<span block-ref=\\"0\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = this.__owl__.refs;
    const ref1 = singleRefSetter(refs, \`name\`);
    const ref2 = singleRefSetter(refs, \`p\`);
    let b2;
    if (ctx['condition']) {
      b2 = block2([ref1]);
    }
    return block1([ref2], [b2]);
  }
}"
`;
