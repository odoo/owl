// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`qweb t-tag can fallback if falsy tag 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = tag => createBlock(\`<\${tag || 'fallback'}/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const tag1 = ctx['tag'];
    return toggler(tag1, block1(tag1)());
  }
}"
`;

exports[`qweb t-tag can update 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = tag => createBlock(\`<\${tag || 't'}/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const tag1 = ctx['tag'];
    return toggler(tag1, block1(tag1)());
  }
}"
`;

exports[`qweb t-tag simple usecases 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = tag => createBlock(\`<\${tag || 't'}/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const tag1 = 'div';
    return toggler(tag1, block1(tag1)());
  }
}"
`;

exports[`qweb t-tag simple usecases 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = tag => createBlock(\`<\${tag || 't'}>text</\${tag || 't'}>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const tag1 = ctx['tag'];
    return toggler(tag1, block1(tag1)());
  }
}"
`;

exports[`qweb t-tag with multiple attributes 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = tag => createBlock(\`<\${tag || 't'} class=\\"blueberry\\" taste=\\"raspberry\\">gooseberry</\${tag || 't'}>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const tag1 = ctx['tag'];
    return toggler(tag1, block1(tag1)());
  }
}"
`;

exports[`qweb t-tag with multiple child nodes 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = tag => createBlock(\`<\${tag || 't'}> pear <span>apple</span> strawberry </\${tag || 't'}>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const tag1 = ctx['tag'];
    return toggler(tag1, block1(tag1)());
  }
}"
`;

exports[`qweb t-tag with multiple t-tag in same template 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = tag => createBlock(\`<\${tag || 't'}><block-child-0/></\${tag || 't'}>\`);
  let block2 = tag => createBlock(\`<\${tag || 't'}>baz</\${tag || 't'}>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const tag1 = ctx['outer'];
    const tag2 = ctx['inner'];
    const b2 = toggler(tag2, block2(tag2)());
    return toggler(tag1, block1(tag1)([], [b2]));
  }
}"
`;

exports[`qweb t-tag with multiple t-tag in same template, part 2 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block2 = tag => createBlock(\`<\${tag || 't'}>bar</\${tag || 't'}>\`);
  let block3 = tag => createBlock(\`<\${tag || 't'}>baz</\${tag || 't'}>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const tag1 = ctx['brother'];
    const b2 = toggler(tag1, block2(tag1)());
    const tag2 = ctx['brother'];
    const b3 = toggler(tag2, block3(tag2)());
    return multi([b2, b3]);
  }
}"
`;
