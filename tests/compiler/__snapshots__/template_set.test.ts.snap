// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loading templates can initialize qweb with a string 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>jupiler</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`loading templates can initialize qweb with an XMLDocument 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>jupiler</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`loading templates can load a few templates from a xml string 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block2 = createBlock(\`<li>ok</li>\`);
  let block3 = createBlock(\`<li>foo</li>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = block2();
    let b3 = block3();
    return multi([b2, b3]);
  }
}"
`;

exports[`loading templates can load a few templates from a xml string 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<ul/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`loading templates can load a few templates from an XMLDocument 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block2 = createBlock(\`<li>ok</li>\`);
  let block3 = createBlock(\`<li>foo</li>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = block2();
    let b3 = block3();
    return multi([b2, b3]);
  }
}"
`;

exports[`loading templates can load a few templates from an XMLDocument 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<ul/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;
