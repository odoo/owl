// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`event handling handler receive the event as argument 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>simple vnode</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`event handling handler receive the event as argument 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<span block-handler-0=\\"click\\"><block-child-0/><block-text-1/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = [ctx['inc'], ctx];
    let b2 = component(\`Child\`, {}, key + \`__1\`, node, ctx);
    let d2 = ctx['state'].value;
    return block1([d1, d2], [b2]);
  }
}"
`;

exports[`event handling objects from scope are properly captured by t-on 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { prepareList, withKey } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  let block3 = createBlock(\`<div class=\\"item\\" block-handler-0=\\"click\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const [k_block2, v_block2, l_block2, c_block2] = prepareList(ctx['items']);
    for (let i1 = 0; i1 < l_block2; i1++) {
      ctx[\`item\`] = v_block2[i1];
      let key1 = ctx['item'];
      const v1 = ctx['onClick'];
      const v2 = ctx['item'];
      let d1 = [ev=>v1(v2.val,ev), ctx];
      c_block2[i1] = withKey(block3([d1]), key1);
    }
    let b2 = list(c_block2);
    return block1([], [b2]);
  }
}"
`;

exports[`event handling support for callable expression in event handler 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-text-0/><input type=\\"text\\" block-handler-1=\\"input\\"/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['state'].value;
    let d2 = [ctx['obj'].onInput, ctx];
    return block1([d1, d2]);
  }
}"
`;

exports[`event handling t-on with handler bound to dynamic argument on a t-foreach 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { prepareList, withKey } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  let block3 = createBlock(\`<div class=\\"item\\" block-handler-0=\\"click\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const [k_block2, v_block2, l_block2, c_block2] = prepareList(ctx['items']);
    for (let i1 = 0; i1 < l_block2; i1++) {
      ctx[\`item\`] = v_block2[i1];
      let key1 = ctx['item'];
      const v1 = ctx['onClick'];
      const v2 = ctx['item'];
      let d1 = [ev=>v1(v2,ev), ctx];
      c_block2[i1] = withKey(block3([d1]), key1);
    }
    let b2 = list(c_block2);
    return block1([], [b2]);
  }
}"
`;
