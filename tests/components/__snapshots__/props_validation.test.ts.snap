// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`default props a default prop cannot be defined on a mandatory prop 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {};
    helpers.validateProps(\`Child\`, props1, ctx);
    return component(\`Child\`, props1, key + \`__1\`, node, ctx);
  }
}"
`;

exports[`default props can set default boolean values 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`default props can set default boolean values 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<span><block-child-0/><block-child-1/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2,b3;
    if (ctx['props'].p) {
      b2 = text(\`hey\`);
    }
    if (!ctx['props'].q) {
      b3 = text(\`hey\`);
    }
    return block1([], [b2, b3]);
  }
}"
`;

exports[`default props can set default values 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`default props can set default values 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].p;
    return block1([txt1]);
  }
}"
`;

exports[`default props default values are also set whenever component is updated 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['state'].p};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`default props default values are also set whenever component is updated 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].p;
    return block1([txt1]);
  }
}"
`;

exports[`props validation can specify that additional props are allowed (array) 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {message: 'm', otherProp: 'o'};
    helpers.validateProps(\`Child\`, props1, ctx);
    return component(\`Child\`, props1, key + \`__1\`, node, ctx);
  }
}"
`;

exports[`props validation can specify that additional props are allowed (array) 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation can specify that additional props are allowed (object) 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {message: 'm', otherProp: 'o'};
    helpers.validateProps(\`Child\`, props1, ctx);
    return component(\`Child\`, props1, key + \`__1\`, node, ctx);
  }
}"
`;

exports[`props validation can specify that additional props are allowed (object) 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation can validate a prop with multiple types 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate a prop with multiple types 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation can validate a prop with multiple types 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate a prop with multiple types 4`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation can validate a prop with multiple types 5`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an array with given primitive type 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an array with given primitive type 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation can validate an array with given primitive type 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an array with given primitive type 4`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation can validate an array with given primitive type 5`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an array with given primitive type 6`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an array with multiple sub element types 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an array with multiple sub element types 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation can validate an array with multiple sub element types 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an array with multiple sub element types 4`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation can validate an array with multiple sub element types 5`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an array with multiple sub element types 6`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation can validate an array with multiple sub element types 7`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an object with simple shape 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an object with simple shape 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation can validate an object with simple shape 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an object with simple shape 4`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an object with simple shape 5`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an optional props 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an optional props 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation can validate an optional props 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate an optional props 4`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation can validate an optional props 5`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate recursively complicated prop def 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate recursively complicated prop def 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation can validate recursively complicated prop def 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation can validate recursively complicated prop def 4`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation can validate recursively complicated prop def 5`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation default values are applied before validating props at update 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['state'].p};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation default values are applied before validating props at update 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].p;
    return block1([txt1]);
  }
}"
`;

exports[`props validation missing required boolean prop causes an error 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation mix of optional and mandatory 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {};
    helpers.validateProps(\`Child\`, props1, ctx);
    const b2 = component(\`Child\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation props are validated in dev mode (code snapshot) 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {message: 1};
    helpers.validateProps(\`Child\`, props1, ctx);
    const b2 = component(\`Child\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation props are validated in dev mode (code snapshot) 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].message;
    return block1([txt1]);
  }
}"
`;

exports[`props validation props are validated whenever component is updated 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['state'].p};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation props are validated whenever component is updated 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].p;
    return block1([txt1]);
  }
}"
`;

exports[`props validation props: list of strings 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation validate simple types 4`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 5`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 6`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 7`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation validate simple types 8`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 9`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 10`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 11`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation validate simple types 12`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 13`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 14`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 15`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation validate simple types 16`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 17`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 18`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 19`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation validate simple types 20`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 21`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 22`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types 23`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation validate simple types 24`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation validate simple types, alternate form 4`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 5`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 6`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 7`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation validate simple types, alternate form 8`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 9`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 10`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 11`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation validate simple types, alternate form 12`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 13`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 14`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 15`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation validate simple types, alternate form 16`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 17`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 18`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 19`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation validate simple types, alternate form 20`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 21`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 22`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validate simple types, alternate form 23`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`props validation validate simple types, alternate form 24`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {p: ctx['p']};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validation is only done in dev mode 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const props1 = {};
    helpers.validateProps(\`SubComp\`, props1, ctx);
    const b2 = component(\`SubComp\`, props1, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validation is only done in dev mode 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = component(\`SubComp\`, {}, key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`props validation validation is only done in dev mode 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>hey</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;
