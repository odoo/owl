// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`children, default props and renderings 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`Child\`, true, false, false, []);
  
  return function xml_template_1000_Parent(ctx, node, key = \\"\\") {
    const b2 = text(ctx['state'].value);
    const b3 = comp1({}, key + \`__1\`, node, this, null);
    return multi([b2, b3]);
  }
}"
`;

exports[`children, default props and renderings 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  return function xml_template_999_Child(ctx, node, key = \\"\\") {
    return text(\`child\`);
  }
}"
`;

exports[`force render in case of existing render 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1001\\"
  const comp1 = app.createComponent(\`B\`, true, false, false, [\\"val\\"]);
  
  return function xml_template_1001_A(ctx, node, key = \\"\\") {
    return comp1({val: ctx['state'].val}, key + \`__1\`, node, this, null);
  }
}"
`;

exports[`force render in case of existing render 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`C\`, true, false, false, []);
  
  return function xml_template_1000_B(ctx, node, key = \\"\\") {
    const b2 = comp1({}, key + \`__1\`, node, this, null);
    const b3 = text(ctx['props'].val);
    return multi([b2, b3]);
  }
}"
`;

exports[`force render in case of existing render 3`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  return function xml_template_999_C(ctx, node, key = \\"\\") {
    return text(\`C\`);
  }
}"
`;

exports[`rendering semantics can force a render to update sub tree 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`Child\`, true, false, false, []);
  
  return function xml_template_1000_Parent(ctx, node, key = \\"\\") {
    const b2 = text(ctx['state'].value);
    const b3 = comp1({}, key + \`__1\`, node, this, null);
    return multi([b2, b3]);
  }
}"
`;

exports[`rendering semantics can force a render to update sub tree 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  return function xml_template_999_Child(ctx, node, key = \\"\\") {
    return text(\`child\`);
  }
}"
`;

exports[`rendering semantics can render a parent without rendering child 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`Child\`, true, false, false, []);
  
  return function xml_template_1000_Parent(ctx, node, key = \\"\\") {
    const b2 = text(ctx['state'].value);
    const b3 = comp1({}, key + \`__1\`, node, this, null);
    return multi([b2, b3]);
  }
}"
`;

exports[`rendering semantics can render a parent without rendering child 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  return function xml_template_999_Child(ctx, node, key = \\"\\") {
    return text(\`child\`);
  }
}"
`;

exports[`rendering semantics props are reactive (nested prop) 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`Child\`, true, false, false, [\\"a\\"]);
  
  return function xml_template_1000_Parent(ctx, node, key = \\"\\") {
    return comp1({a: ctx['state']}, key + \`__1\`, node, this, null);
  }
}"
`;

exports[`rendering semantics props are reactive (nested prop) 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  return function xml_template_999_Child(ctx, node, key = \\"\\") {
    return text(ctx['props'].a.b.c);
  }
}"
`;

exports[`rendering semantics props are reactive 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`Child\`, true, false, false, [\\"a\\"]);
  
  return function xml_template_1000_Parent(ctx, node, key = \\"\\") {
    return comp1({a: ctx['state']}, key + \`__1\`, node, this, null);
  }
}"
`;

exports[`rendering semantics props are reactive 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  return function xml_template_999_Child(ctx, node, key = \\"\\") {
    return text(ctx['props'].a.b);
  }
}"
`;

exports[`rendering semantics render need a boolean = true to be 'deep' 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`Child\`, true, false, false, []);
  
  return function xml_template_1000_Parent(ctx, node, key = \\"\\") {
    const b2 = text(ctx['state'].value);
    const b3 = comp1({}, key + \`__1\`, node, this, null);
    return multi([b2, b3]);
  }
}"
`;

exports[`rendering semantics render need a boolean = true to be 'deep' 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  return function xml_template_999_Child(ctx, node, key = \\"\\") {
    return text(\`child\`);
  }
}"
`;

exports[`rendering semantics render with deep=true followed by render with deep=false work as expected 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`Child\`, true, false, false, []);
  
  return function xml_template_1000_Parent(ctx, node, key = \\"\\") {
    const b2 = text(\`parent\`);
    const b3 = text(ctx['state'].value);
    const b4 = comp1({}, key + \`__1\`, node, this, null);
    return multi([b2, b3, b4]);
  }
}"
`;

exports[`rendering semantics render with deep=true followed by render with deep=false work as expected 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  return function xml_template_999_Child(ctx, node, key = \\"\\") {
    const b2 = text(\`child\`);
    const b3 = text(ctx['env'].getValue());
    return multi([b2, b3]);
  }
}"
`;

exports[`rendering semantics rendering is atomic (for one subtree) 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1001\\"
  const comp1 = app.createComponent(\`B\`, true, false, false, [\\"obj\\"]);
  
  return function xml_template_1001_A(ctx, node, key = \\"\\") {
    const b2 = text(ctx['state'].obj.val);
    const b3 = comp1({obj: ctx['state'].obj}, key + \`__1\`, node, this, null);
    return multi([b2, b3]);
  }
}"
`;

exports[`rendering semantics rendering is atomic (for one subtree) 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`C\`, true, false, false, [\\"obj\\"]);
  
  return function xml_template_1000_B(ctx, node, key = \\"\\") {
    return comp1({obj: ctx['props'].obj}, key + \`__1\`, node, this, null);
  }
}"
`;

exports[`rendering semantics rendering is atomic (for one subtree) 3`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  return function xml_template_999_C(ctx, node, key = \\"\\") {
    return text(ctx['props'].obj.val);
  }
}"
`;

exports[`rendering semantics works as expected for dynamic number of props 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`Child\`, true, false, true, []);
  
  return function xml_template_1000_Parent(ctx, node, key = \\"\\") {
    return comp1(Object.assign({}, ctx['state']), key + \`__1\`, node, this, null);
  }
}"
`;

exports[`rendering semantics works as expected for dynamic number of props 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  return function xml_template_999_Child(ctx, node, key = \\"\\") {
    return text(Object.keys(ctx['props']).length);
  }
}"
`;
