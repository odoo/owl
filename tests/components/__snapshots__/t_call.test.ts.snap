// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-call dynamic t-call 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { isBoundary, zero, call } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    let b1 = text(\` owl \`);
    ctx[zero] = b1;
    const template1 = (ctx['current'].template);
    return call(this, template1, ctx, node, key + \`__1\`);
  }
}"
`;

exports[`t-call dynamic t-call 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div>foo</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`t-call dynamic t-call 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    return text(\`bar\`);
  }
}"
`;

exports[`t-call dynamic t-call: key is propagated 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { call } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = component(\`Child\`, {}, key + \`__1\`, node, ctx);
    const template1 = (ctx['sub']);
    let b3 = call(this, template1, ctx, node, key + \`__2\`);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call dynamic t-call: key is propagated 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"id\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let attr1 = ctx['id'];
    return block1([attr1]);
  }
}"
`;

exports[`t-call dynamic t-call: key is propagated 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    return component(\`Child\`, {}, key + \`__1\`, node, ctx);
  }
}"
`;

exports[`t-call handlers are properly bound through a dynamic t-call 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { call } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/><block-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const template1 = ('__template__999');
    let b2 = call(this, template1, ctx, node, key + \`__1\`);
    let txt1 = ctx['counter'];
    return block1([txt1], [b2]);
  }
}"
`;

exports[`t-call handlers are properly bound through a dynamic t-call 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<p block-handler-0=\\"click\\">lucas</p>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let hdlr1 = [()=>this.update(), ctx];
    return block1([hdlr1]);
  }
}"
`;

exports[`t-call handlers are properly bound through a t-call 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { getTemplate } = helpers;
  const callTemplate_1 = getTemplate(\`__template__999\`);
  
  let block1 = createBlock(\`<div><block-child-0/><block-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    let txt1 = ctx['counter'];
    return block1([txt1], [b2]);
  }
}"
`;

exports[`t-call handlers are properly bound through a t-call 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<p block-handler-0=\\"click\\">lucas</p>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let hdlr1 = [ctx['update'], ctx];
    return block1([hdlr1]);
  }
}"
`;

exports[`t-call handlers with arguments are properly bound through a t-call 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { getTemplate } = helpers;
  const callTemplate_1 = getTemplate(\`__template__999\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-call handlers with arguments are properly bound through a t-call 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<p block-handler-0=\\"click\\">lucas</p>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const v1 = ctx['a'];
    let hdlr1 = [()=>this.update(v1), ctx];
    return block1([hdlr1]);
  }
}"
`;

exports[`t-call parent is set within t-call 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { getTemplate } = helpers;
  const callTemplate_1 = getTemplate(\`__template__999\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-call parent is set within t-call 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    return component(\`Child\`, {}, key + \`__1\`, node, ctx);
  }
}"
`;

exports[`t-call parent is set within t-call 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<span>lucas</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`t-call parent is set within t-call with no parentNode 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { getTemplate } = helpers;
  const callTemplate_1 = getTemplate(\`__template__999\`);
  
  return function template(ctx, node, key = \\"\\") {
    return callTemplate_1.call(this, ctx, node, key + \`__1\`);
  }
}"
`;

exports[`t-call parent is set within t-call with no parentNode 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    return component(\`Child\`, {}, key + \`__1\`, node, ctx);
  }
}"
`;

exports[`t-call parent is set within t-call with no parentNode 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<span>lucas</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`t-call sub components in two t-calls 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { getTemplate } = helpers;
  const callTemplate_1 = getTemplate(\`sub\`);
  const callTemplate_2 = getTemplate(\`sub\`);
  
  let block3 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2,b3;
    if (ctx['state'].val===1) {
      b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    } else {
      let b4 = callTemplate_2.call(this, ctx, node, key + \`__2\`);
      b3 = block3([], [b4]);
    }
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call sub components in two t-calls 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    return component(\`Child\`, {val: ctx['state'].val}, key + \`__1\`, node, ctx);
  }
}"
`;

exports[`t-call sub components in two t-calls 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<span><block-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].val;
    return block1([txt1]);
  }
}"
`;

exports[`t-call t-call in t-foreach and children component 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { prepareList, getTemplate, withKey } = helpers;
  const callTemplate_1 = getTemplate(\`__template__999\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const [k_block2, v_block2, l_block2, c_block2] = prepareList(['a','b','c']);
    for (let i1 = 0; i1 < l_block2; i1++) {
      ctx[\`val\`] = v_block2[i1];
      ctx[\`val_first\`] = i1 === 0;
      ctx[\`val_last\`] = i1 === v_block2.length - 1;
      ctx[\`val_index\`] = i1;
      ctx[\`val_value\`] = k_block2[i1];
      let key1 = ctx['val'];
      c_block2[i1] = withKey(callTemplate_1.call(this, ctx, node, key + \`__1__\${key1}\`), key1);
    }
    let b2 = list(c_block2);
    return block1([], [b2]);
  }
}"
`;

exports[`t-call t-call in t-foreach and children component 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    return component(\`Child\`, {val: ctx['val']}, key + \`__1\`, node, ctx);
  }
}"
`;

exports[`t-call t-call in t-foreach and children component 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<span><block-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].val;
    return block1([txt1]);
  }
}"
`;
