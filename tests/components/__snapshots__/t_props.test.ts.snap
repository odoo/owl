// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-props t-props and other props 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div><block-text-0/><block-text-1/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['props'].a;
    let d2 = ctx['props'].b;
    return block1([d1, d2]);
  }
}"
`;

exports[`t-props t-props and other props 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div><div><block-child-0/></div></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = component(\`Comp\`, Object.assign({}, ctx['state1'], {a: ctx['a']}), key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`t-props t-props only 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div><block-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['props'].a;
    return block1([d1]);
  }
}"
`;

exports[`t-props t-props only 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div><div><block-child-0/></div></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = component(\`Comp\`, ctx['state'], key + \`__1\`, node, ctx);
    return block1([], [b2]);
  }
}"
`;
