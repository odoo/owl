// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-props basic use 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`Child\`, true, false, true, []);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function xml_template_1000_Parent(ctx, node, key = \\"\\") {
    const b2 = comp1(Object.assign({}, ctx['some'].obj), key + \`__1\`, node, this, null);
    return block1([], [b2]);
  }
}"
`;

exports[`t-props basic use 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  let block1 = createBlock(\`<span><block-text-0/></span>\`);
  
  return function xml_template_999_Child(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].a+ctx['props'].b;
    return block1([txt1]);
  }
}"
`;

exports[`t-props child receives a copy of the t-props object, not the original 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`Child\`, true, false, true, []);
  
  return function xml_template_1000_Parent(ctx, node, key = \\"\\") {
    return comp1(Object.assign({}, ctx['childProps']), key + \`__1\`, node, this, null);
  }
}"
`;

exports[`t-props child receives a copy of the t-props object, not the original 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  let block1 = createBlock(\`<div/>\`);
  
  return function xml_template_999_Child(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`t-props t-props and other props 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`Comp\`, true, false, true, [\\"a\\"]);
  
  let block1 = createBlock(\`<div><div><block-child-0/></div></div>\`);
  
  return function xml_template_1000_Parent(ctx, node, key = \\"\\") {
    const b2 = comp1(Object.assign({}, ctx['state1'], {a: ctx['a']}), key + \`__1\`, node, this, null);
    return block1([], [b2]);
  }
}"
`;

exports[`t-props t-props and other props 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  let block1 = createBlock(\`<div><block-text-0/><block-text-1/></div>\`);
  
  return function xml_template_999_Comp(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].a;
    let txt2 = ctx['props'].b;
    return block1([txt1, txt2]);
  }
}"
`;

exports[`t-props t-props only 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`Comp\`, true, false, true, []);
  
  let block1 = createBlock(\`<div><div><block-child-0/></div></div>\`);
  
  return function xml_template_1000_Parent(ctx, node, key = \\"\\") {
    const b2 = comp1(Object.assign({}, ctx['state']), key + \`__1\`, node, this, null);
    return block1([], [b2]);
  }
}"
`;

exports[`t-props t-props only 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  let block1 = createBlock(\`<div><block-text-0/></div>\`);
  
  return function xml_template_999_Comp(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].a;
    return block1([txt1]);
  }
}"
`;

exports[`t-props t-props with props 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_1000\\"
  const comp1 = app.createComponent(\`Child\`, true, false, true, [\\"a\\",\\"b\\"]);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function xml_template_1000_Parent(ctx, node, key = \\"\\") {
    const b2 = comp1(Object.assign({}, ctx['childProps'], {a: 1,b: 2}), key + \`__1\`, node, this, null);
    return block1([], [b2]);
  }
}"
`;

exports[`t-props t-props with props 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  // Template name: \\"xml_template_999\\"
  
  let block1 = createBlock(\`<div/>\`);
  
  return function xml_template_999_Child(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;
