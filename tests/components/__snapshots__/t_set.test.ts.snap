// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-set slot setted value (with t-set) not accessible with t-esc 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { isBoundary, withDefault, setContextValue, capture } = helpers;
  
  let block1 = createBlock(\`<div><p><block-text-0/></p><block-child-0/><p><block-text-1/></p></div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    setContextValue(ctx, \\"iter\\", 'inCall');
  return text('');
  }
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    setContextValue(ctx, \\"iter\\", 'source');
    let txt1 = ctx['iter'];
    const ctx1 = capture(ctx);
    let b2 = component(\`Childcomp\`, {slots: {'default': {__render: slot1, __ctx: ctx1}}}, key + \`__1\`, node, ctx);
    let txt2 = ctx['iter'];
    return block1([txt1, txt2], [b2]);
  }
}"
`;

exports[`t-set slot setted value (with t-set) not accessible with t-esc 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { isBoundary, withDefault, setContextValue } = helpers;
  
  let block1 = createBlock(\`<div><block-text-0/><block-text-1/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    let txt1 = ctx['iter'];
    setContextValue(ctx, \\"iter\\", 'called');
    let txt2 = ctx['iter'];
    return block1([txt1, txt2]);
  }
}"
`;

exports[`t-set t-set can't alter component even if key in component 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { isBoundary, withDefault, setContextValue } = helpers;
  
  let block1 = createBlock(\`<div><p><block-text-0/></p><p><block-text-1/></p></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    let txt1 = ctx['iter'];
    setContextValue(ctx, \\"iter\\", 5);
    let txt2 = ctx['iter'];
    return block1([txt1, txt2]);
  }
}"
`;

exports[`t-set t-set can't alter component if key not in component 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { isBoundary, withDefault, setContextValue } = helpers;
  
  let block1 = createBlock(\`<div><p><block-text-0/></p><p><block-text-1/></p></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    let txt1 = ctx['iter'];
    setContextValue(ctx, \\"iter\\", 5);
    let txt2 = ctx['iter'];
    return block1([txt1, txt2]);
  }
}"
`;

exports[`t-set t-set in t-if 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { isBoundary, withDefault, setContextValue } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/><block-child-0/><block-child-0/><p><block-text-0/></p></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    setContextValue(ctx, \\"flag\\", ctx['state'].flag);
    if (ctx['flag']==='if') {
      setContextValue(ctx, \\"iter\\", 2);
    } else if (ctx['flag']==='elif') {
      setContextValue(ctx, \\"iter\\", 3);
    } else {
      setContextValue(ctx, \\"iter\\", 4);
    }
    let txt1 = ctx['iter'];
    return block1([txt1]);
  }
}"
`;

exports[`t-set t-set not altered by child comp 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { isBoundary, withDefault, setContextValue } = helpers;
  
  let block1 = createBlock(\`<div><p><block-text-0/></p><block-child-0/><p><block-text-1/></p></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    setContextValue(ctx, \\"iter\\", 'source');
    let txt1 = ctx['iter'];
    let b2 = component(\`Childcomp\`, {}, key + \`__1\`, node, ctx);
    let txt2 = ctx['iter'];
    return block1([txt1, txt2], [b2]);
  }
}"
`;

exports[`t-set t-set not altered by child comp 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { isBoundary, withDefault, setContextValue } = helpers;
  
  let block1 = createBlock(\`<div><block-text-0/><block-text-1/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    let txt1 = ctx['iter'];
    setContextValue(ctx, \\"iter\\", 'called');
    let txt2 = ctx['iter'];
    return block1([txt1, txt2]);
  }
}"
`;

exports[`t-set t-set outside modified in t-if 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { isBoundary, withDefault, setContextValue } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/><block-child-0/><block-child-0/><p><block-text-0/></p></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    setContextValue(ctx, \\"iter\\", 0);
    setContextValue(ctx, \\"flag\\", ctx['state'].flag);
    if (ctx['flag']==='if') {
      setContextValue(ctx, \\"iter\\", 2);
    } else if (ctx['flag']==='elif') {
      setContextValue(ctx, \\"iter\\", 3);
    } else {
      setContextValue(ctx, \\"iter\\", 4);
    }
    let txt1 = ctx['iter'];
    return block1([txt1]);
  }
}"
`;
