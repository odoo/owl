// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Portal Add and remove portals 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { prepareList, Portal, capture, withKey } = helpers;
  
  function slot1(ctx, node, key = \\"\\") {
    let b3 = text(\` Portal\`);
    let b4 = text(ctx['portalId']);
    return multi([b3, b4]);
  }
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const [k_block1, v_block1, l_block1, c_block1] = prepareList(ctx['portalIds']);
    for (let i1 = 0; i1 < l_block1; i1++) {
      ctx[\`portalId\`] = v_block1[i1];
      let key1 = ctx['portalId'];
      const ctx1 = capture(ctx);
      c_block1[i1] = withKey(component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx1}}}, key + \`__1__\${key1}\`, node, ctx), key1);
    }
    return list(c_block1);
  }
}"
`;

exports[`Portal Add and remove portals on div 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { prepareList, Portal, capture, withKey } = helpers;
  
  let block2 = createBlock(\`<div> Portal<block-text-0/></div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    let txt1 = ctx['portalId'];
    return block2([txt1]);
  }
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const [k_block1, v_block1, l_block1, c_block1] = prepareList(ctx['portalIds']);
    for (let i1 = 0; i1 < l_block1; i1++) {
      ctx[\`portalId\`] = v_block1[i1];
      let key1 = ctx['portalId'];
      const ctx1 = capture(ctx);
      c_block1[i1] = withKey(component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx1}}}, key + \`__1__\${key1}\`, node, ctx), key1);
    }
    return list(c_block1);
  }
}"
`;

exports[`Portal Add and remove portals with t-foreach 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { prepareList, Portal, capture, withKey } = helpers;
  
  let block2 = createBlock(\`<div><block-text-0/><block-child-0/></div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    let b4 = text(\` Portal\`);
    let b5 = text(ctx['portalId']);
    return multi([b4, b5]);
  }
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const [k_block1, v_block1, l_block1, c_block1] = prepareList(ctx['portalIds']);
    for (let i1 = 0; i1 < l_block1; i1++) {
      ctx[\`portalId\`] = v_block1[i1];
      let key1 = ctx['portalId'];
      let txt1 = ctx['portalId'];
      const ctx1 = capture(ctx);
      let b6 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx1}}}, key + \`__1__\${key1}\`, node, ctx);
      c_block1[i1] = withKey(block2([txt1], [b6]), key1);
    }
    return list(c_block1);
  }
}"
`;

exports[`Portal Add and remove portals with t-foreach and destroy 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { prepareList, Portal, capture, withKey } = helpers;
  
  let block2 = createBlock(\`<div><block-text-0/><block-child-0/></div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    let b4 = text(\` Portal\`);
    let b5 = text(ctx['portalId']);
    return multi([b4, b5]);
  }
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const [k_block1, v_block1, l_block1, c_block1] = prepareList(ctx['portalIds']);
    for (let i1 = 0; i1 < l_block1; i1++) {
      ctx[\`portalId\`] = v_block1[i1];
      let key1 = ctx['portalId'];
      let txt1 = ctx['portalId'];
      const ctx1 = capture(ctx);
      let b6 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx1}}}, key + \`__1__\${key1}\`, node, ctx);
      c_block1[i1] = withKey(block2([txt1], [b6]), key1);
    }
    return list(c_block1);
  }
}"
`;

exports[`Portal Add and remove portals with t-foreach inside div 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { prepareList, Portal, capture, withKey } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  let block3 = createBlock(\`<div><block-text-0/><block-child-0/></div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    let b5 = text(\` Portal\`);
    let b6 = text(ctx['portalId']);
    return multi([b5, b6]);
  }
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const [k_block2, v_block2, l_block2, c_block2] = prepareList(ctx['portalIds']);
    for (let i1 = 0; i1 < l_block2; i1++) {
      ctx[\`portalId\`] = v_block2[i1];
      let key1 = ctx['portalId'];
      let txt1 = ctx['portalId'];
      const ctx1 = capture(ctx);
      let b7 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx1}}}, key + \`__1__\${key1}\`, node, ctx);
      c_block2[i1] = withKey(block3([txt1], [b7]), key1);
    }
    let b2 = list(c_block2);
    return block1([], [b2]);
  }
}"
`;

exports[`Portal Portal composed with t-slot 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return component(\`Child2\`, {customHandler: ctx['_handled']}, key + \`__1\`, node, ctx);
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(\`Child\`, {slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__2\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal Portal composed with t-slot 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal, callSlot } = helpers;
  
  function slot1(ctx, node, key = \\"\\") {
    return callSlot(ctx, node, key, 'default', false, {});
  }
  
  return function template(ctx, node, key = \\"\\") {
    return component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
  }
}"
`;

exports[`Portal Portal composed with t-slot 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div block-handler-0=\\"custom\\"><span id=\\"childSpan\\">child2</span></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let hdlr1 = [ctx['onCustom'], ctx];
    return block1([hdlr1]);
  }
}"
`;

exports[`Portal basic use of portal 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><span>1</span><block-child-0/></div>\`);
  let block2 = createBlock(\`<p>2</p>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return block2();
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal basic use of portal in dev mode 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><span>1</span><block-child-0/></div>\`);
  let block2 = createBlock(\`<p>2</p>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return block2();
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal basic use of portal on div 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><span>1</span><block-child-0/></div>\`);
  let block2 = createBlock(\`<div><p>2</p></div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return block2();
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal conditional use of Portal (with sub Component) 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block2 = createBlock(\`<span>1</span>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return component(\`Child\`, {val: ctx['state'].val}, key + \`__1\`, node, ctx);
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b2,b4;
    b2 = block2();
    if (ctx['state'].hasPortal) {
      b4 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__2\`, node, ctx);
    }
    return multi([b2, b4]);
  }
}"
`;

exports[`Portal conditional use of Portal (with sub Component) 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<p><block-text-0/></p>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].val;
    return block1([txt1]);
  }
}"
`;

exports[`Portal conditional use of Portal 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block2 = createBlock(\`<span>1</span>\`);
  let block3 = createBlock(\`<p>2</p>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return block3();
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b2,b4;
    b2 = block2();
    if (ctx['state'].hasPortal) {
      b4 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    }
    return multi([b2, b4]);
  }
}"
`;

exports[`Portal conditional use of Portal with child and div 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    let b2;
    if (ctx['state'].hasPortal) {
      b2 = component(\`Child\`, {}, key + \`__1\`, node, ctx);
    }
    return multi([b2]);
  }
}"
`;

exports[`Portal conditional use of Portal with child and div 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { prepareList, Portal, capture, withKey } = helpers;
  
  let block1 = createBlock(\`<div><span>hasPortal</span><block-child-0/></div>\`);
  let block3 = createBlock(\`<p>thePortal</p>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return block3();
  }
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const [k_block2, v_block2, l_block2, c_block2] = prepareList([1]);
    for (let i1 = 0; i1 < l_block2; i1++) {
      ctx[\`elem\`] = v_block2[i1];
      let key1 = ctx['elem'];
      const ctx1 = capture(ctx);
      c_block2[i1] = withKey(component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx1}}}, key + \`__1__\${key1}\`, node, ctx), key1);
    }
    let b2 = list(c_block2);
    return block1([], [b2]);
  }
}"
`;

exports[`Portal conditional use of Portal with child and div, variation 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block2 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2;
    if (ctx['state'].hasPortal) {
      let b3 = component(\`Child\`, {}, key + \`__1\`, node, ctx);
      b2 = block2([], [b3]);
    }
    return multi([b2]);
  }
}"
`;

exports[`Portal conditional use of Portal with child and div, variation 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { prepareList, Portal, capture, withKey } = helpers;
  
  let block2 = createBlock(\`<span>hasPortal</span>\`);
  let block4 = createBlock(\`<p>thePortal</p>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return block4();
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = block2();
    ctx = Object.create(ctx);
    const [k_block3, v_block3, l_block3, c_block3] = prepareList([1]);
    for (let i1 = 0; i1 < l_block3; i1++) {
      ctx[\`elem\`] = v_block3[i1];
      let key1 = ctx['elem'];
      const ctx1 = capture(ctx);
      c_block3[i1] = withKey(component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx1}}}, key + \`__1__\${key1}\`, node, ctx), key1);
    }
    let b3 = list(c_block3);
    return multi([b2, b3]);
  }
}"
`;

exports[`Portal conditional use of Portal with div 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block2 = createBlock(\`<div><span>hasPortal</span><block-child-0/></div>\`);
  let block3 = createBlock(\`<p>thePortal</p>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return block3();
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b2;
    if (ctx['state'].hasPortal) {
      let b4 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
      b2 = block2([], [b4]);
    }
    return multi([b2]);
  }
}"
`;

exports[`Portal lifecycle hooks of portal sub component are properly called 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/><block-child-0/></div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return component(\`Child\`, {val: ctx['state'].val}, key + \`__1\`, node, ctx);
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3;
    if (ctx['state'].hasChild) {
      b3 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__2\`, node, ctx);
    }
    return block1([], [b3]);
  }
}"
`;

exports[`Portal lifecycle hooks of portal sub component are properly called 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<span><block-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].val;
    return block1([txt1]);
  }
}"
`;

exports[`Portal portal could have dynamically no content 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  let block3 = createBlock(\`<span><block-text-0/></span>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    let b3;
    if (ctx['state'].val) {
      let txt1 = ctx['state'].val;
      b3 = block3([txt1]);
    }
    return multi([b3]);
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b4 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    return block1([], [b4]);
  }
}"
`;

exports[`Portal portal destroys on crash 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return component(\`Child\`, {error: ctx['state'].error}, key + \`__1\`, node, ctx);
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__2\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal portal destroys on crash 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<span><block-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].error&&this.will.crash;
    return block1([txt1]);
  }
}"
`;

exports[`Portal portal with child and props 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return component(\`Child\`, {val: ctx['state'].val}, key + \`__1\`, node, ctx);
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__2\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal portal with child and props 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<span><block-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].val;
    return block1([txt1]);
  }
}"
`;

exports[`Portal portal with dynamic body 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  let block3 = createBlock(\`<span><block-text-0/></span>\`);
  let block4 = createBlock(\`<div/>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    let b3,b4;
    if (ctx['state'].val) {
      let txt1 = ctx['state'].val;
      b3 = block3([txt1]);
    } else {
      b4 = block4();
    }
    return multi([b3, b4]);
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b5 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    return block1([], [b5]);
  }
}"
`;

exports[`Portal portal with many children 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  let block3 = createBlock(\`<div>1</div>\`);
  let block4 = createBlock(\`<p>2</p>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    let b3 = block3();
    let b4 = block4();
    return multi([b3, b4]);
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b5 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    return block1([], [b5]);
  }
}"
`;

exports[`Portal portal with no content 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    let b3;
    if (false) {
      b3 = text('ABC');
    }
    return multi([b3]);
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b4 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    return block1([], [b4]);
  }
}"
`;

exports[`Portal portal with only text as content 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return text('only text');
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal portal with target not in dom 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  let block2 = createBlock(\`<div>2</div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return block2();
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(Portal, {target: '#does-not-exist',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal portal's parent's env is not polluted 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return component(\`Child\`, {}, key + \`__1\`, node, ctx);
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__2\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal portal's parent's env is not polluted 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<button>child</button>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`Portal simple catchError with portal 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-child-0/><block-child-1/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2,b3;
    if (ctx['error']) {
      b2 = text(\`Error\`);
    } else {
      b3 = component(\`Boom\`, {}, key + \`__1\`, node, ctx);
    }
    return block1([], [b2, b3]);
  }
}"
`;

exports[`Portal simple catchError with portal 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><span>1</span><block-child-0/></div>\`);
  let block2 = createBlock(\`<p><block-text-0/></p>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    let txt1 = ctx['a'].b.c;
    return block2([txt1]);
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal with target in template (after portal) 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><span>1</span><block-child-0/><div id=\\"local-target\\"/></div>\`);
  let block2 = createBlock(\`<p>2</p>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return block2();
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(Portal, {target: '#local-target',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal with target in template (before portal) 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><div id=\\"local-target\\"/><span>1</span><block-child-0/></div>\`);
  let block2 = createBlock(\`<p>2</p>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return block2();
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(Portal, {target: '#local-target',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal: Props validation target must be a valid selector 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  let block2 = createBlock(\`<div>2</div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return block2();
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(Portal, {target: ' ',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal: Props validation target must be a valid selector 2 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  let block2 = createBlock(\`<div>2</div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return block2();
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(Portal, {target: 'aa',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__1\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal: UI/UX focus is kept across re-renders 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  let { Portal } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  function slot1(ctx, node, key = \\"\\") {
    return component(\`Child\`, {val: ctx['state'].val}, key + \`__1\`, node, ctx);
  }
  
  return function template(ctx, node, key = \\"\\") {
    let b3 = component(Portal, {target: '#outside',slots: {'default': {__render: slot1, __ctx: ctx}}}, key + \`__2\`, node, ctx);
    return block1([], [b3]);
  }
}"
`;

exports[`Portal: UI/UX focus is kept across re-renders 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component, comment } = bdom;
  
  let block1 = createBlock(\`<input id=\\"target-me\\" block-attribute-0=\\"placeholder\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let attr1 = ctx['props'].val;
    return block1([attr1]);
  }
}"
`;
