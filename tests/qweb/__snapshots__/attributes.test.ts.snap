// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`attributes changing a class with t-att-class (preexisting class 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div class=\\"hoy\\" block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['v'];
    return block1([d1]);
  }
}"
`;

exports[`attributes changing a class with t-att-class 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['v'];
    return block1([d1]);
  }
}"
`;

exports[`attributes changing an attribute with t-att- 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"value\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['v'];
    return block1([d1]);
  }
}"
`;

exports[`attributes class and t-att-class should combine together 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"class\\" class=\\"hello\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['value'];
    return block1([d1]);
  }
}"
`;

exports[`attributes class and t-attf-class with ternary operation 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div class=\\"hello\\" block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = (ctx['value']?'world':'');
    return block1([d1]);
  }
}"
`;

exports[`attributes dynamic attribute evaluating to 0 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"foo\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['value'];
    return block1([d1]);
  }
}"
`;

exports[`attributes dynamic attribute falsy variable  1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"foo\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['value'];
    return block1([d1]);
  }
}"
`;

exports[`attributes dynamic attribute with a dash 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"data-action-id\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['id'];
    return block1([d1]);
  }
}"
`;

exports[`attributes dynamic attributes 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"foo\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = 'bar';
    return block1([d1]);
  }
}"
`;

exports[`attributes dynamic class attribute 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['c'];
    return block1([d1]);
  }
}"
`;

exports[`attributes dynamic class attribute evaluating to 0 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['value'];
    return block1([d1]);
  }
}"
`;

exports[`attributes dynamic empty class attribute 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['c'];
    return block1([d1]);
  }
}"
`;

exports[`attributes dynamic formatted attributes with a dash 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"aria-label\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = \`Some text \${ctx['id']}\`;
    return block1([d1]);
  }
}"
`;

exports[`attributes fixed variable 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"foo\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['value'];
    return block1([d1]);
  }
}"
`;

exports[`attributes format expression 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"foo\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = (ctx['value']+37);
    return block1([d1]);
  }
}"
`;

exports[`attributes format literal 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"foo\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = \`bar\`;
    return block1([d1]);
  }
}"
`;

exports[`attributes format multiple 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"foo\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = \`a \${ctx['value1']} is \${ctx['value2']} of \${ctx['value3']} ]\`;
    return block1([d1]);
  }
}"
`;

exports[`attributes format value 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"foo\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = \`b\${ctx['value']}r\`;
    return block1([d1]);
  }
}"
`;

exports[`attributes from object variables set previously 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div><span block-attribute-0=\\"class\\"/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    setContextValue(ctx, \\"o\\", {a:'b'});
    let d1 = ctx['o'].a;
    return block1([d1]);
  }
}"
`;

exports[`attributes from variables set previously (no external node) 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<span block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    setContextValue(ctx, \\"abc\\", 'def');
    let d1 = ctx['abc'];
    return block1([d1]);
  }
}"
`;

exports[`attributes from variables set previously 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div><span block-attribute-0=\\"class\\"/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    setContextValue(ctx, \\"abc\\", 'def');
    let d1 = ctx['abc'];
    return block1([d1]);
  }
}"
`;

exports[`attributes object 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attributes=\\"0\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['value'];
    return block1([d1]);
  }
}"
`;

exports[`attributes static attributes 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div foo=\\"a\\" bar=\\"b\\" baz=\\"c\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`attributes static attributes on void elements 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<img src=\\"/test.skip.jpg\\" alt=\\"Test\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`attributes static attributes with dashes 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div aria-label=\\"Close\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`attributes t-att-class and class should combine together 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div class=\\"hello\\" block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['value'];
    return block1([d1]);
  }
}"
`;

exports[`attributes t-att-class with multiple classes 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = {'a b c':ctx['value']};
    return block1([d1]);
  }
}"
`;

exports[`attributes t-att-class with multiple classes 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = {['a b c']:ctx['value']};
    return block1([d1]);
  }
}"
`;

exports[`attributes t-att-class with multiple classes, some of which are duplicate 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = {'a b c':ctx['value'],'a b d':!ctx['value']};
    return block1([d1]);
  }
}"
`;

exports[`attributes t-att-class with object 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div class=\\"static\\" block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = {a:ctx['b'],c:ctx['d'],e:ctx['f']};
    return block1([d1]);
  }
}"
`;

exports[`attributes t-attf-class 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = \`hello\`;
    return block1([d1]);
  }
}"
`;

exports[`attributes t-attf-class should combine with class 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div class=\\"hello\\" block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = \`world\`;
    return block1([d1]);
  }
}"
`;

exports[`attributes t-attf-class with multiple classes 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = \`hello \${ctx['word']}\`;
    return block1([d1]);
  }
}"
`;

exports[`attributes t-attf-class with multiple classes separated by multiple spaces 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = \`hello  \${ctx['word']}\`;
    return block1([d1]);
  }
}"
`;

exports[`attributes tuple literal 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attributes=\\"0\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ['foo','bar'];
    return block1([d1]);
  }
}"
`;

exports[`attributes tuple variable 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attributes=\\"0\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['value'];
    return block1([d1]);
  }
}"
`;

exports[`attributes two classes 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div class=\\"a b\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`attributes two dynamic attributes 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"foo\\" block-attribute-1=\\"bar\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = 'bar';
    let d2 = 'foo';
    return block1([d1, d2]);
  }
}"
`;

exports[`attributes updating classes (with obj notation) 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div class=\\"hoy\\" block-attribute-0=\\"class\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = {'a b':ctx['condition']};
    return block1([d1]);
  }
}"
`;

exports[`attributes various escapes 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div foo=\\"&lt;foo\\" block-attribute-0=\\"bar\\" block-attribute-1=\\"baz\\" block-attributes=\\"2\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['bar'];
    let d2 = \`<\${ctx['baz']}>\`;
    let d3 = ctx['qux'];
    return block1([d1, d2, d3]);
  }
}"
`;

exports[`attributes various escapes 2 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div> &lt; </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`special cases for some specific html attributes/properties input of type checkbox with t-att-indeterminate 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<input type=\\"checkbox\\" block-attribute-0=\\"indeterminate\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['v'];
    return block1([d1]);
  }
}"
`;

exports[`special cases for some specific html attributes/properties input type= checkbox, with t-att-checked 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<input type=\\"checkbox\\" block-attribute-0=\\"checked\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['flag'];
    return block1([d1]);
  }
}"
`;

exports[`special cases for some specific html attributes/properties input with t-att-value 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<input block-attribute-0=\\"value\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['v'];
    return block1([d1]);
  }
}"
`;

exports[`special cases for some specific html attributes/properties various boolean html attributes 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div><input type=\\"checkbox\\" checked=\\"checked\\"/><input checked=\\"checked\\"/><div checked=\\"checked\\"/><div selected=\\"selected\\"/><option selected=\\"selected\\" other=\\"1\\"/><input readonly=\\"readonly\\"/><button disabled=\\"disabled\\"/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;
