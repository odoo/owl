// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`debugging t-debug 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  let block2 = createBlock(\`<span>hey</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    debugger;
    let b2;
    if (true) {
      debugger;
      b2 = block2();
    }
    return block1([], [b2]);
  }
}"
`;

exports[`debugging t-debug on sub template 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<p>coucou</p>\`);
  
  return function template(ctx, node, key = \\"\\") {
    debugger;
    return block1();
  }
}"
`;

exports[`debugging t-debug on sub template 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  const callTemplate_2 = getTemplate(\`sub\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = callTemplate_2(ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`debugging t-log 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    setContextValue(ctx, \\"foo\\", 42);
    console.log(ctx['foo']+3);
    return block1();
  }
}"
`;
