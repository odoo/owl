// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-ref can get a dynamic ref on a node 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div><span block-ref=\\"0\\"/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = ctx.__owl__.refs;
    const v1 = ctx['id'];
    let d1 = (el) => refs[\`myspan\${v1}\`] = el;
    return block1([d1]);
  }
}"
`;

exports[`t-ref can get a ref on a node 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div><span block-ref=\\"0\\"/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = ctx.__owl__.refs;
    let d1 = (el) => refs[\`myspan\`] = el;
    return block1([d1]);
  }
}"
`;

exports[`t-ref ref in a t-call 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  const callTemplate_2 = getTemplate(\`sub\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = callTemplate_2(ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-ref ref in a t-call 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div>1<span block-ref=\\"0\\"/>2</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = ctx.__owl__.refs;
    let d1 = (el) => refs[\`name\`] = el;
    return block1([d1]);
  }
}"
`;

exports[`t-ref ref in a t-if 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  let block2 = createBlock(\`<span block-ref=\\"0\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = ctx.__owl__.refs;
    let b2;
    if (ctx['condition']) {
      let d1 = (el) => refs[\`name\`] = el;
      b2 = block2([d1]);
    }
    return block1([], [b2]);
  }
}"
`;

exports[`t-ref refs in a loop 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  let block3 = createBlock(\`<div block-ref=\\"0\\"><block-text-1/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = ctx.__owl__.refs;
    ctx = Object.create(ctx);
    const [k_block2, v_block2, l_block2, c_block2] = prepareList(ctx['items']);
    for (let i1 = 0; i1 < l_block2; i1++) {
      ctx[\`item\`] = v_block2[i1];
      let key1 = ctx['item'];
      const v1 = ctx['item'];
      let d1 = (el) => refs[\`\${v1}\`] = el;
      let d2 = ctx['item'];
      c_block2[i1] = withKey(block3([d1, d2]), key1);
    }
    let b2 = list(c_block2);
    return block1([], [b2]);
  }
}"
`;

exports[`t-ref two refs, one in a t-if 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, component } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture, isBoundary, shallowEqual, setContextValue, toNumber } = helpers;
  
  let block1 = createBlock(\`<div><block-child-0/><p block-ref=\\"0\\"/></div>\`);
  let block2 = createBlock(\`<span block-ref=\\"0\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = ctx.__owl__.refs;
    let b2;
    if (ctx['condition']) {
      let d1 = (el) => refs[\`name\`] = el;
      b2 = block2([d1]);
    }
    let d2 = (el) => refs[\`p\`] = el;
    return block1([d2], [b2]);
  }
}"
`;
