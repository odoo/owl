// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RouteComponent can render simple cases 1`] = `
"function anonymous(context,extra
) {
    let utils = this.constructor.utils;
    let QWeb = this.constructor;
    let parent = context;
    let owner = context;
    let sibling = null;
    let result;
    var h = this.h;
    if (context['routeComponent']) {
        //COMPONENT
        let key3 = 'key' + context['env'].router.currentRouteName;
        let def1;
        let templateId2 = \`__4__\` + key3;
        let w2 = templateId2 in parent.__owl__.cmap ? parent.__owl__.children[parent.__owl__.cmap[templateId2]] : false;
        let vn5 = {};
        result = vn5;
        let props2 = Object.assign({}, context['env'].router.currentParams);
        if (w2 && w2.__owl__.currentFiber && !w2.__owl__.vnode) {
            w2.destroy();
            w2 = false;
        }
        if (!w2) {
            let componentKey2 = \`routeComponent\`;
            let W2 = context.constructor.components[componentKey2] || QWeb.components[componentKey2]|| context['routeComponent'];
            if (!W2) {throw new Error('Cannot find the definition of component \\"' + componentKey2 + '\\"')}
            w2 = new W2(parent, props2);
            parent.__owl__.cmap[templateId2] = w2.__owl__.id;
            def1 = w2.__prepare(extra.fiber, undefined, undefined, sibling);
            let pvnode = h('dummy', {key: templateId2, hook: {insert(vn) { let nvn=w2.__mount(fiber, pvnode.elm);pvnode.elm=nvn.elm;},remove() {},destroy(vn) {w2.destroy();}}});
            const fiber = w2.__owl__.currentFiber;
            def1.then(function () {if (w2.__owl__.isDestroyed) {return;} const vnode = fiber.vnode; pvnode.sel = vnode.sel; });
            utils.defineProxy(vn5, pvnode);
            w2.__owl__.pvnode = pvnode;
        } else {
            def1 = def1 || w2.__updateProps(props2, extra.fiber, undefined, undefined, sibling);
            let pvnode = w2.__owl__.pvnode;
            utils.defineProxy(vn5, pvnode);
        }
        sibling = w2.__owl__.currentFiber;
    }
    return result;
}"
`;
