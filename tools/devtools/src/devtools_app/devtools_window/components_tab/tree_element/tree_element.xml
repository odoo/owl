<?xml version="1.0" encoding="UTF-8" ?>
<templates xml:space="preserve">
  <t t-name="devtools.TreeElement" owl="1">
    <div t-attf-id="treeElement/{{pathAsString}}" 
      t-att-class="{'component-selected': props.selected,'component-highlighted': props.highlighted}" 
      class="tree-component m-0 p-0 w-100 text-nowrap user-select-none" 
      t-on-contextmenu.prevent="(ev) => this.store.contextMenu.open(ev, this.contextMenu.el)" 
      t-on-mouseover.stop="() => this.store.highlightComponent(props.path)" 
      t-on-click.stop="toggleComponent"
    >
      <div class="component-wrapper" t-attf-style="padding-left: {{componentPadding}}rem">
        <i class="fa mx-1 pointer-icon"
          t-att-class="{'fa-caret-right': !props.toggled, 'fa-caret-down': props.toggled}" 
          t-on-click.stop="toggleDisplay"
          t-attf-style="visibility: {{props.children.length > 0 ? '' : 'hidden'}};"
        />
        <span t-if="props.depth">&lt;</span>
        <span style="color: var(--component-color);">
          <HighlightText originalText="props.name" searchValue="state.searched ? store.componentSearch.search : ''"/>
          <t t-if="minimizedKey.length > 0">
            <span t-if="minimizedKey.length > 0" style="color: var(--key-name);"> key</span>=<span style="color: var(--key-content);">
              <t t-esc="minimizedKey"/>
            </span>
          </t>
        </span>
        <span t-if="props.depth">&gt;</span>
      </div>
      <div class="custom-menu d-none" t-attf-style="top: {{store.contextMenu.top}}; left: {{store.contextMenu.left}}" t-ref="contextmenu">
        <ul class="my-1">
          <li t-on-click.stop="() => this.store.toggleComponentAndChildren(props.path, true)" class="custom-menu-item py-1 px-4">Expand children</li>
          <li t-on-click.stop="() => this.store.toggleComponentAndChildren(props.path, false)" class="custom-menu-item py-1 px-4">Fold children</li>
          <li t-on-click.stop="() => this.store.logComponentDataInConsole('instance', props.path)" class="custom-menu-item py-1 px-4">Store as global variable</li>
          <li t-on-click.stop="() => this.store.inspectComponent('source', props.path)" class="custom-menu-item py-1 px-4">Inspect source code</li>
          <t t-if="props.path.length !== 1">
            <li t-on-click.stop="() => this.store.inspectComponent('DOM', props.path)" class="custom-menu-item py-1 px-4">Inspect in Elements tab</li>
            <li t-on-click.stop="() => this.store.refreshComponent(props.path)" class="custom-menu-item py-1 px-4">Force rerender</li>
            <li t-on-click.stop="() => this.store.logComponentDataInConsole('subscription', props.path)" class="custom-menu-item py-1 px-4">Store observed states as global variable</li>
            <li t-on-click.stop="() => this.store.inspectComponent('compiled template', props.path)" class="custom-menu-item py-1 px-4">Inspect compiled template</li>
            <li t-on-click.stop="() => this.store.inspectComponent('raw template', props.path)" class="custom-menu-item py-1 px-4">Log raw template</li>
          </t>
        </ul>
      </div>
    </div>
    <t t-if="props.toggled">
      <t t-foreach="props.children" t-as="child" t-key="child.key">
        <TreeElement t-props="child"/>
      </t>
    </t>
  </t>
</templates>
